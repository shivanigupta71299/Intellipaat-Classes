SELECT TOP 6 * from LOS_L_BASIC_INFO_B order by pid desc;
--- DDL DML 
---- wild Card
--- union all/ union/ intersect/except(diff in union and union all)
-- RDBMS and DBMS

--DBMS - Excel/ Windows  - There is no relation bw any 2 excel or folder and in case u want to perform any query u need to do manually.
--RDBMS - SQL  - We can use joins to perform any sort of relation or something. 
--
--excel1         excel2
--5000 movies    100000000 mp3
--
--folder1         folder2
--5000 movies    100000000 mp3

-- My SQL and MSSQL
-- Excel and SQL


create TABLE CUSTOMER(
  customer_id NUMBER(8,2) primary key,
  first_name nvarchar2(50) NOT NULL,
  last_name nvarchar2(50) NOT NULL,
  email nvarchar2(50),
  address nvarchar2(50),
  city nvarchar2(50),
  state nvarchar2(50),
  zip Number(6,2)
);

Insert into CUSTOMER(customer_id,first_name,last_name) values ('1','Aarushi','Singh');
Insert into CUSTOMER values ('6','Mohan','Madan','m@gmail.com','New Delhi Rohini','Delhi street','C','11');
Insert into CUSTOMER values ('3','Catherine','kapoor','ck@gmail.com','32','Paris street','A','11');
Insert into CUSTOMER values ('4','Gopal','Kishan','k.g@gmail.com','12','Ranibagh street','B','11');
Insert into CUSTOMER values ('5','Krishan','Kanhaiya','k.k@gmail.com','12','Rohini street','D','11');


create TABLE ORDERS(
  order_id NUMBER(8,2),
  order_date Date,
  amount NUMBER(20,2),
  customer_id int primary key
);

Alter table orders add constraint chk_amt CHECK (amount>0);

Insert into ORDERS values ('1','01/01/1999','2000','1');
INSERT INTO "ORDERS" (ORDER_ID, ORDER_DATE, AMOUNT, CUSTOMER_ID) VALUES ('24', TO_DATE('1999-01-20 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '1000', '2');
INSERT INTO "ORDERS" (ORDER_ID, ORDER_DATE, AMOUNT, CUSTOMER_ID) VALUES ('34', TO_DATE('1979-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '500', '3');
INSERT INTO "ORDERS" (ORDER_ID, ORDER_DATE, AMOUNT, CUSTOMER_ID) VALUES ('44', TO_DATE('1229-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '9090', '4');

JOINS - LEFT,RIGHT, Inner join, outer join, self join, cartesian join(TOTAL 6 JOINS)


SELECT * FROM LOS_L_BASIC_INFO_I_B FETCH FIRST 3 ROWS ONLY;
-- second highest age in LOS_L_BASIC_INFO_I_B

Select * from (SELECT pid,age FROM LOS_L_BASIC_INFO_I_B where age<(SELECT max(age) FROM LOS_L_BASIC_INFO_I_B) order by age desc FETCH
FIRST 2 ROWS ONLY) order by age asc FETCH FIRST 1 ROWS ONLY;

--- GROUP BY  (If there is anything with wise - like filter state wise then group by state.
select gender,count(pid) from LOS_L_BASIC_INFO_I_B group by gender;

-- Diff in where and having..... both are filters. where is applied before having group by
-- In 'having' it is used after applying group by
select gender,count(pid) from LOS_L_BASIC_INFO_I_B group by gender having count(pid)>300 order by gender;

-- Temporary table;  # for Microsoft Sql, use # for local temporary and ## for global. In ORacle, local does not exist, only global as below.
create global temporary table sidi as select * from los_m_dlp;


-- CONSTRAINTS   - primary and unique key, CANDIDATE KEY SUPER KEY

Primary Key      can be one        can have one/multiple columns     restricts duplicate and null value  clusterd
Unique           can be multiple   can have one/multiple columns     restricts duplicate                 non-clusterd
CREATE TABLE "ACTIVITY" 
   (	"PK_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1601 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EXECUTIONORDERID" NUMBER(10,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1601 NOT NULL ENABLE, 
	"PROCESS_NAME" NVARCHAR2(150) NOT NULL, 
	"ACTIVITY_NAME" NVARCHAR2(150) PRIMARY KEY, 
	"EVENT" NVARCHAR2(100) UNIQUE, 
	"VALIDATE_VALUE" NVARCHAR2(150) check(VALIDATE_VALUE>5), 
	"DATATYPE" NVARCHAR2(10) foreign key references los_validate_value(pk_id), 
	"TARGET_FIELD" NVARCHAR2(150), 

  primary key(ACTIVITY_NAME,PROCESS_NAME)
   );

   alter table dummy add constraint c1 primary key(username);
    
  
   

-- Normalisation - 1NF, 2 NF, 3NF,4,5NF, BCNF 

1NF - atomic value
2NF - partial dependency 
3NF - TRANSITIVE DEPENDENCY
4NF - MULTIVALUED DEPENDENCY
5nf- project join nf

-- Procedure view coalesce  
-- star and snowflake schema

-- FUNCTIONS

select substr(casenumber,3,5) from LOS_BILLING;

select SUBSTR('TechOnTheNet', 2, 5) from dual;
select reverse('TechOnTheNet') from dual;
SELECT INSTR('New Yorko', 'o', 5,2) FROM dual;
SELECT INSTR('New York', 'ork') FROM dual;
SELECT LENgth('New York') FROM dual;
select trim('  hello  world   ') from dual;
select replace('Shivani Gupta','a','o') from dual;
SELECT REPLACE('MAN and MAT','M','F') as abc FROM DUAL;
-- to find number of o in below string
SELECT REGEXP_COUNT ('New Yorkoo', 'o') FROM dual;


-- Difference in Cast and Convert


---- 25 Dec 2022 Class check

-- WINDOWS  FUNCTION

select  P_AGE,rank() over(order by P_AGE desc) from passenger; 
select  P_AGE,dense_rank() over(order by P_AGE desc) from passenger; 
select  P_AGE,row_number() over(order by P_AGE desc) as count into new_tble from passenger;
create table new_tble as select  P_AGE,row_number() over(order by P_AGE desc) as count from passenger;
drop table new_tble;

-- Same flight code ke liye wo rank dega from 1 to n and then next flight code ke liye again 1 to n
-- like can be used to count number of females and male
select  P_AGE,dense_rank() over(partition by P_FLIGHT_CODE order by P_AGE desc) from passenger; 

-- Print one female and one male sequence  here 12 and 33 alternate in P_flight_code
select  P_AGE,P_FLIGHT_CODE,P_NAME,dense_rank() over(partition by P_FLIGHT_CODE order by P_AGE desc) as coount from passenger order by coount,p_name; 
-- Added p_name in above query bcoz if it is not mentioned then it will be alternate but F,M,M,F,F,M,F,M .... it could come like this. like 33,12,12,33,12...

SELECT * FROM passenger
FETCH FIRST 3 ROWS ONLY;

---- exception handling


--- TABLE VALUED FUNCTION  - IT RETURNS TABLE 
CREATE FUNCTION PASSENGERFLIGHT(F_CODE NVARCHAR2)
RETURN TABLE
AS 
SELECT * FROM PASSENGER WHERE P_FLIGHT_CODE=F_CODE
-- try catch
  --- transaction and rollback
  
--- wait for delay 00:00:10 - 10 sec
---nolock query  when any table is locked use
select * from passenger(nolock)

----ACID PROPERTY
A - atomic
C - consistent
I - isolated
D - durability


--- datatype

create table datatypefamily(
    col1 int,
    col2 bigint,
    col3 tinyint,
    col4 smallint,
    col5 nvarchar(30),
    col6 datetime,
    col7 smalldatetime,
    col8 date,
    col9 float,
    col10 numeric(5,20),
    col11 decimal(5,2),
    col12 varchar(30),
    col13 varchar(max),
    
)

# 7th Jan
Pivot
cast(phy as numeric())
stuff

create index ind1 on passenger(P_AGE);

clustered and unclustered index
Trigger
create trigger t1 on student after (delete,update,insert) as 
begin 
end

create trigger t1 
on passenger 
instead of delete 
as 
begin 
select @a=
end



create index ind1 on passenger(P_AGE);

create trigger t1 
on passenger 
instead of delete 
as 
begin 
select @a=
end

create table assignment
(
   person_id  integer not null, 
   job_id     integer not null, 
   primary key (person_id, job_id)
)
organization index;

create table student
(
   person_id   integer not null, 
   job_id      integer not null, 
   start_date  date, 
   end_date    date,
   primary key (person_id, job_id)
)
organization index
including start_date
overflow storage (initial 4k);


CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);
create or replace function Multiple_of_10(Multiple NVARCHAR2)
return integer
is
  vrble INT;
BEGIN
  SELECT MULTIPLE * 10 INTO vrble FROM DUAL;
  
  RETURN vrble;
    
END;
# UNION UNION ALL INTERSECT EXCEPT


create table employee('Employee_id' number(5,2), 'First_name' nvarchar2(50),'Last_Name' nvarchar2(50), Salary number(18,0), joining_date date, department nvarchar2(50));
Insert into employee values(2,'Veena','Verma',80000,'2011-06-15','Admin');
Insert into employee values(3,'Vishal','Singhal',300000,'2020-02-16','HR');
Insert into employee values(4,'Sushanth','Singh',500000,'2020-02-17','Admin');
Insert into employee values(5,'Bhupal','Bhati',500000,'2011-06-18','Admin');
Insert into employee values(6,'Dheeraj','Diwan',200000,'2011-06-19','Account');
Insert into employee values(7,'Karan','Kumar',75000,'2020-01-14','Account');
Insert into employee values(8,'Chandrika','Chauhan',90000,'2011-04-15','Admin');
